import{_ as e,C as l,c as n,o as h,ag as a,j as i,a as t,G as o}from"./chunks/framework.BmLMQRXF.js";const m=JSON.parse('{"title":"快速开始","description":"","frontmatter":{},"headers":[],"relativePath":"guide/quick-start.md","filePath":"guide/quick-start.md"}'),r={name:"guide/quick-start.md"},d={id:"python-解释器安装",tabindex:"-1"};function k(c,s,g,F,u,y){const p=l("Badge");return h(),n("div",null,[s[3]||(s[3]=a(`<h1 id="快速开始" tabindex="-1">快速开始 <a class="header-anchor" href="#快速开始" aria-label="Permalink to &quot;快速开始&quot;">​</a></h1><p>嗨～你好呀～这里是 yutto，一个可爱的命令行驱动的 B 站视频下载工具～</p><p>我的工作方式非常简单快捷，你只需要提供给我 B 站的链接，我就可以帮你下载好视频啦～就像这样：</p><div class="language-sh"><pre><code>
<span style="color:magenta;">❯</span> yutto https://www.bilibili.com/video/BV1ZEf9YiE2h/
 <span style="color:#0096FF;">INFO</span>  发现配置文件 yutto.toml，加载中……
<span style="color:var(--vp-code-block-bg);background-color:magenta;font-weight:bold;"> 大会员 </span> 成功以大会员身份登录～
<span style="color:var(--vp-code-block-bg);background-color:cyan;"> 投稿视频 </span> 植物大战僵尸融合版2.2正式版宣传片
 <span style="color:#0096FF;">INFO</span>  开始处理视频 植物大战僵尸融合版2.2正式版宣传片
 <span style="color:#0096FF;">INFO</span>  共包含以下 15 个视频流：
 <span style="color:#0096FF;">INFO</span>  <span style="color:#0096FF;">* 0 [AVC ] [1920x1080] &lt;1080P 60帧&gt; #3</span>
 <span style="color:#0096FF;">INFO</span>    1 [HEVC] [1920x1080] &lt;1080P 60帧&gt; #3
 <span style="color:#0096FF;">INFO</span>    2 [AV1 ] [1920x1080] &lt;1080P 60帧&gt; #3
 <span style="color:#0096FF;">INFO</span>    3 [AVC ] [1920x1080] &lt;1080P 高清&gt; #3
 <span style="color:#0096FF;">INFO</span>    4 [HEVC] [1920x1080] &lt;1080P 高清&gt; #3
 <span style="color:#0096FF;">INFO</span>    5 [AV1 ] [1920x1080] &lt;1080P 高清&gt; #3
 <span style="color:#0096FF;">INFO</span>    6 [AVC ] [1280x720 ] &lt;720P 高清 &gt; #3
 <span style="color:#0096FF;">INFO</span>    7 [HEVC] [1280x720 ] &lt;720P 高清 &gt; #3
 <span style="color:#0096FF;">INFO</span>    8 [AV1 ] [1280x720 ] &lt;720P 高清 &gt; #3
 <span style="color:#0096FF;">INFO</span>    9 [AVC ] [ 852x480 ] &lt;480P 清晰 &gt; #3
 <span style="color:#0096FF;">INFO</span>   10 [HEVC] [ 852x480 ] &lt;480P 清晰 &gt; #3
 <span style="color:#0096FF;">INFO</span>   11 [AV1 ] [ 852x480 ] &lt;480P 清晰 &gt; #3
 <span style="color:#0096FF;">INFO</span>   12 [AVC ] [ 640x360 ] &lt;360P 流畅 &gt; #3
 <span style="color:#0096FF;">INFO</span>   13 [HEVC] [ 640x360 ] &lt;360P 流畅 &gt; #3
 <span style="color:#0096FF;">INFO</span>   14 [AV1 ] [ 640x360 ] &lt;360P 流畅 &gt; #3
 <span style="color:#0096FF;">INFO</span>  共包含以下 3 个音频流：
 <span style="color:#0096FF;">INFO</span>  <span style="color:magenta;">* 0 [MP4A] &lt;320kbps &gt;</span>
 <span style="color:#0096FF;">INFO</span>    1 [MP4A] &lt; 64kbps &gt;
 <span style="color:#0096FF;">INFO</span>    2 [MP4A] &lt;128kbps &gt;
<span style="color:var(--vp-code-block-bg);background-color:cyan;"> 弹幕 </span> ASS 弹幕已生成
 <span style="color:#0096FF;">INFO</span>  开始下载……
<span style="color:green;">━━━━━━━━━━━━━━━━━━━━━━━━━━━╸</span>━━━━━━━━━━━━━━━━━━━━━━  39.05 MiB/ 72.13 MiB 32.22 MiB/⚡
</code>
</pre></div><p>下面我将会从安装开始介绍我的使用方式～</p><h2 id="环境配置" tabindex="-1">环境配置 <a class="header-anchor" href="#环境配置" aria-label="Permalink to &quot;环境配置&quot;">​</a></h2><div class="tip custom-block"><p class="custom-block-title">注意</p><p>如果你使用 Homebrew、paru、Docker 等可以自动帮助你配置环境的方式来安装，此部分内容可以跳过～</p></div>`,7)),i("h3",d,[s[0]||(s[0]=t("Python 解释器安装 ")),o(p,{type:"tip",text:"3.9+"}),s[1]||(s[1]=t()),s[2]||(s[2]=i("a",{class:"header-anchor",href:"#python-解释器安装","aria-label":'Permalink to "Python 解释器安装 <Badge type="tip" text="3.9+"/>"'},"​",-1))]),s[4]||(s[4]=a(`<p>你可能会好奇，我是怎么指挥你的设备来帮助你下载想要的视频的，其实这很大程度归功于 Python 前辈的帮忙，有了 <span title="指 Python">TA</span>，我才能和你的设备正常沟通。不过有一点需要注意的就是，必须要 3.9 以上版本的 Python 前辈才可以哦，不然可能 <span title="指 Python">TA</span> 也听不懂我的一些「方言」呢～</p><p>如果你是 Windows，请自行去 <a href="https://www.python.org/" target="_blank" rel="noreferrer">Python 官网</a>下载并安装，安装时记得要勾选「Add to PATH」选项，不然可能需要你手动添加到环境变量。</p><p>macOS 及 Linux 发行版一般都自带 Python 环境，但要注意版本。</p><p>安装完成后可以通过 <code>python --version</code> 来确定是否正确安装，当然这里仍然需要再次注意一下版本号～</p><h3 id="ffmpeg-下载与配置" tabindex="-1">FFmpeg 下载与配置 <a class="header-anchor" href="#ffmpeg-下载与配置" aria-label="Permalink to &quot;FFmpeg 下载与配置&quot;">​</a></h3><p>由于 B 站视频是需要混流合并的，因此我的正常运作离不开 FFmpeg 前辈的帮助，因此你需要事先将 <span title="指 FFmpeg">TA</span> 正确安装在你的设备上～</p><p>如果你所使用的操作系统是 Windows，操作有些些麻烦，你需要<a href="https://ffmpeg.org/download.html" target="_blank" rel="noreferrer">手动下载</a>后，并将可执行文件所在路径设置到到你的环境变量中～</p><details class="details custom-block"><summary>详细操作</summary><p>打开下载链接后，在 「Get packages &amp; executable files」 部分选择 Windows 徽标，在 「Windows EXE Files」 下找到 「Windows builds by BtbN」 并点击，会跳转到一个 GitHub Releases 页面，在 「Latest release」 里就能看到最新的构建版本了～</p><p>下载后解压，并随便放到一个安全的地方，然后在文件夹中找到 <code>ffmpeg.exe</code>，复制其所在文件夹路径。</p><p>右击「此电脑」，选择属性，在其中找到「高级系统设置」 → 「环境变量」，双击 PATH，在其中添加刚刚复制的路径（非 Win10 系统操作略有差异，请自行查阅「环境变量设置」的方法）。</p><p>保存保存，完事啦～～～</p></details><p>当然，如果你使用的是 macOS 或者 Linux 发行版的话，直接使用自己的包管理器就能一键完成该过程。</p><details class="details custom-block"><summary>示例</summary><p>这里给出一些示例，不会一一列举，其它的大家可以自行搜索下～</p><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-cjPQk" id="tab-cev5VqS" checked><label data-title="macOS" for="tab-cev5VqS">macOS</label><input type="radio" name="group-cjPQk" id="tab-zMeKUOv"><label data-title="Ubuntu" for="tab-zMeKUOv">Ubuntu</label><input type="radio" name="group-cjPQk" id="tab-F-l4rca"><label data-title="Arch" for="tab-F-l4rca">Arch</label></div><div class="blocks"><div class="language-bash vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ffmpeg</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">apt</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ffmpeg</span></span></code></pre></div><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pacman</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ffmpeg</span></span></code></pre></div></div></div></details><p>此时，你可以尝试在终端上使用 <code>ffmpeg -version</code> 命令来测试下安装是否正确，只要显示的不是 <code>Command not found</code> 之类的提示就说明成功啦～</p><h2 id="召唤-yutto" tabindex="-1">召唤 yutto <a class="header-anchor" href="#召唤-yutto" aria-label="Permalink to &quot;召唤 yutto&quot;">​</a></h2><p>当当当，是时候主角登场啦～不过在此之前仍然需要学习一点小小的咒语～</p><p>你可以通过以下几种方式中的任意一种来召唤（安装）我，我随叫随到～</p><h3 id="包管理器一键安装啦" tabindex="-1">包管理器一键安装啦 <a class="header-anchor" href="#包管理器一键安装啦" aria-label="Permalink to &quot;包管理器一键安装啦&quot;">​</a></h3><p>我目前可以通过一些包管理器直接安装～这是最简单快捷的安装方式～</p><p>使用 Homebrew 的小伙伴可以尝试下下面的命令：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tap</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> siguremo/tap</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">brew</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yutto</span></span></code></pre></div><p>使用 <a href="https://github.com/Morganamilo/paru" target="_blank" rel="noreferrer">paru</a>（Arch 上的 AUR 包管理器）的用户可以尝试下这样的命令（感谢 @ouuan）：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">paru</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -S</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yutto</span></span></code></pre></div><h3 id="使用-docker" tabindex="-1">使用 Docker <a class="header-anchor" href="#使用-docker" aria-label="Permalink to &quot;使用 Docker&quot;">​</a></h3><p>你也可以尝试使用 docker 直接运行（运行时的更多参数需要参考下后面的内容～）</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">docker</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --rm</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -it</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -v</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /path/to/download:/app</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> siguremo/yutto</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ur</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">l</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [options]</span></span></code></pre></div><p>与直接本机运行不同的是，这里的下载目标路径是通过 <code>-v &lt;path&gt;:/app</code> 指定的，也就是说 docker 内的我会将内容下载到 docker 里的 <code>/app</code> 目录下，与之相对应的挂载点 <code>&lt;path&gt;</code> 就是下载路径。你也可以直接挂载到 <code>$(pwd)</code>，此时就和本机运行我的默认行为一致啦，也是下载到当前目录下～</p><h3 id="pip-pipx-uv-安装-需自行配置环境" tabindex="-1">pip/pipx/uv 安装 <sup>需自行配置环境</sup> <a class="header-anchor" href="#pip-pipx-uv-安装-需自行配置环境" aria-label="Permalink to &quot;pip/pipx/uv 安装 &lt;sup&gt;需自行配置环境&lt;/sup&gt;&quot;">​</a></h3><p>我的所有版本均已上传到 PyPI，因此你当然可以通过 pip 来安装啦～</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yutto</span></span></code></pre></div><p>当然，你也可以通过 <a href="https://github.com/pypa/pipx" target="_blank" rel="noreferrer">pipx</a>/<a href="https://github.com/astral-sh/uv" target="_blank" rel="noreferrer">uv</a> 来安装（当然，前提是你要自己先安装 TA 们）</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yutto</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      # 使用 pipx</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tool</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> yutto</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   # 或者使用 uv</span></span></code></pre></div><p>pipx/uv 会类似 Homebrew 无感地为我创建一个独立的虚拟环境，与其余环境隔离开，避免污染 pip 的环境，因此相对于 pip，pipx/uv 是更推荐的安装方式（uv 会比 pipx 更快些～）。</p><h3 id="体验-main-分支最新特性-需自行配置环境" tabindex="-1">体验 main 分支最新特性 <sup>需自行配置环境</sup> <a class="header-anchor" href="#体验-main-分支最新特性-需自行配置环境" aria-label="Permalink to &quot;体验 main 分支最新特性 &lt;sup&gt;需自行配置环境&lt;/sup&gt;&quot;">​</a></h3><p>有些时候有一些在 main 分支还没有发布的新特性或者 bugfix，你可以尝试直接安装 main 分支的代码，最快的方式仍然是通过 pip 安装，只不过需要使用 git 描述符</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pip</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git+https://github.com/yutto-dev/yutto@main</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                 # 通过 pip</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pipx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git+https://github.com/yutto-dev/yutto@main</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                # 或者通过 pipx</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">uv</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> tool</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> git+https://github.com/yutto-dev/yutto.git@main</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         # 或者通过 uv</span></span></code></pre></div><h2 id="yutto-一下" tabindex="-1">yutto 一下～ <a class="header-anchor" href="#yutto-一下" aria-label="Permalink to &quot;yutto 一下～&quot;">​</a></h2><p>嗯，跟随上面的指引后我应当可以正常工作啦，那么现在，请为我分配任务吧～</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yutto</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ur</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">l</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>没错，为我分配任务的方式就是这么简单～</p><p>不过值得注意的是这样只可以下载单个视频，如果有批量下载需求的话请添加 <code>-b/--batch</code> 参数：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yutto</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --batch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ur</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">l</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 或者使用其短参数</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yutto</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ur</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">l</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>此时我会认为该 url 是一个批量下载链接，会从其中解析出多个视频链接出来进行下载。</p><p>下面举例说明一下：</p><p>这里的 <code>&lt;url&gt;</code> 是 <a href="https://www.bilibili.com/bangumi/play/ep395211" target="_blank" rel="noreferrer">《転スラ日記》</a> 第一话链接，那么如果你只想下载该话的话只需要运行：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yutto</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://www.bilibili.com/bangumi/play/ep395211</span></span></code></pre></div><p>或者如果你想要该番剧全集，请运行：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">yutto</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -b</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> https://www.bilibili.com/bangumi/play/ep395211</span></span></code></pre></div><h2 id="下一步" tabindex="-1">下一步 <a class="header-anchor" href="#下一步" aria-label="Permalink to &quot;下一步&quot;">​</a></h2><p>很好，到此为止你已经了解如何让我来帮你下载视频啦～</p><p>不过你可能会有一些问题，比如：</p><ul><li>为什么下载的视频不够清晰？我在线看的视频明明至少都有 1080P 的呀</li><li>为什么需要这么冗长的 url 才能下载视频？是否有更简洁的方式？</li></ul><p>这里先简单卖个关子，因为这些答案你都可以在后续内容中找到，这才刚刚开始呢～</p><p>这里给出一些推荐内容，你可以尝试：</p><ul><li>如果你希望了解我具体都支持哪些链接，可以尝试前往 <a href="./supported-links">支持的链接</a> 查看</li><li>如果你希望了解我的进阶用法，可以尝试前往 <a href="./cli/introduction">命令行参数</a> 查看</li></ul>`,52))])}const v=e(r,[["render",k]]);export{m as __pageData,v as default};
